#Add unexisting itk::Image templates
itk_wrap_class("itk::Image" POINTER)
  foreach(t ${WRAP_ITK_REAL})
    itk_wrap_template("${t}4" "${ITKT_${t}}, 4") #Wrap template itk::Image< float, 4 >
	itk_wrap_template("${ITKM_V${t}3}4" "${ITKT_V${t}3}, 4") #Wrap template itk::Image< itk::Vector< float, 3 >, 4 >
  endforeach()
itk_end_wrap_class()

#Add unexisting itk::ImageToImageFilter templates 
itk_wrap_class("itk::ImageToImageFilter" POINTER)
  foreach(t ${WRAP_ITK_REAL})
    itk_wrap_template("${ITKM_I${t}4}${ITKM_I${t}3}" "itk::Image<${ITKT_${t}}, 4>, itk::Image<${ITKT_${t}}, 3>")
	itk_wrap_template("${ITKM_I${ITKM_V${t}3}4}${ITKM_I${ITKM_V${t}3}3}" "itk::Image<${ITKT_V${t}3}, 4>, itk::Image<${ITKT_V${t}3}, 3>") #Wrap vector types
  endforeach()
itk_end_wrap_class()

#CyclicDeformationImageFilter wrapping 
itk_wrap_class("rtk::CyclicDeformationImageFilter"  POINTER)
  set(INPUT_IMAGE_DIMS 4)
  set(OUTPUT_IMAGE_DIMS 3)
  foreach(t ${WRAP_ITK_REAL})
    itk_wrap_template("I${ITKM_${t}}${INPUT_IMAGE_DIMS}I${ITKM_${t}}${OUTPUT_IMAGE_DIMS}"
	  "itk::Image<${ITKT_${t}}, ${INPUT_IMAGE_DIMS}>, itk::Image<${ITKT_${t}}, ${OUTPUT_IMAGE_DIMS}>")
	itk_wrap_template("I${ITKM_V${t}3}${INPUT_IMAGE_DIMS}I${ITKM_V${t}3}${OUTPUT_IMAGE_DIMS}"
	  "itk::Image<${ITKT_V${t}3}, ${INPUT_IMAGE_DIMS}>, itk::Image<${ITKT_V${t}3}, ${OUTPUT_IMAGE_DIMS}>") #Wrap vector types
  endforeach()
itk_end_wrap_class()